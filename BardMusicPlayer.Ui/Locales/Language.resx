<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BardExtSettings_GFXLow" xml:space="preserve">
    <value>Sets the client graphics to low specs</value>
  </data>
  <data name="BardExtSettings_LyricsTrackNumber" xml:space="preserve">
    <value>Enables the lyrics parsing
0 means stop lyrics parsing 
1 the first lyrics track (lyric tracks are separate from the music tracks)</value>
  </data>
  <data name="BardExtSettings_PostSongTitle" xml:space="preserve">
    <value>Sends the song title in the chat</value>
  </data>
  <data name="BardExtSettings_PostSongTitle_Auto" xml:space="preserve">
    <value>Sends automatically at song load the title in the chat</value>
  </data>
  <data name="Global_Load_Song_To_Playlist" xml:space="preserve">
    <value>Adds the song to the current playlist</value>
  </data>
  <data name="Global_Load_Song_To_Preview" xml:space="preserve">
    <value>Load the song into the preview</value>
  </data>
  <data name="Main_All_Tracks" xml:space="preserve">
    <value>Merges all tracks in the song and plays them as one
2 tracks are 1 track now</value>
  </data>
  <data name="Main_Play" xml:space="preserve">
    <value>Plays the currently loaded song.
Right click will equip the bards, do the ready check and starts to play</value>
  </data>
  <data name="Main_Playback_Speed" xml:space="preserve">
    <value>Sets the playback speed of the song</value>
  </data>
  <data name="Main_Rewind" xml:space="preserve">
    <value>Rewinds the song</value>
  </data>
  <data name="Main_Script" xml:space="preserve">
    <value>Opens the script panel</value>
  </data>
  <data name="Misc_More_Options" xml:space="preserve">
    <value>More options</value>
  </data>
  <data name="Misc_OMNI" xml:space="preserve">
    <value>Opens the song analyzer and voice graph</value>
  </data>
  <data name="Misc_QEdit" xml:space="preserve">
    <value>Opens the quick song editor</value>
  </data>
  <data name="Playlist_Add" xml:space="preserve">
    <value>Add song(s) to the current playlist.
Right click to add a folder</value>
  </data>
  <data name="Playlist_Autoplay" xml:space="preserve">
    <value>Enables / Disables the autoplay
(only for solo play)</value>
  </data>
  <data name="Playlist_Catalog_Cleanup" xml:space="preserve">
    <value>Reorganise the music catalog to free up some space</value>
  </data>
  <data name="Playlist_Catalog_Export" xml:space="preserve">
    <value>Export the current music catalog</value>
  </data>
  <data name="Playlist_Catalog_New" xml:space="preserve">
    <value>Creates a new music catalog</value>
  </data>
  <data name="Playlist_Catalog_Open" xml:space="preserve">
    <value>Opens a music catalog</value>
  </data>
  <data name="Playlist_Catalog_Search_Songs" xml:space="preserve">
    <value>Search for a song in the selected playlist</value>
  </data>
  <data name="Playlist_Delete" xml:space="preserve">
    <value>delete the current playlist</value>
  </data>
  <data name="Playlist_New" xml:space="preserve">
    <value>Create a new playlist</value>
  </data>
  <data name="Playlist_Open_Metadata" xml:space="preserve">
    <value>Opens the meta data editor</value>
  </data>
  <data name="Playlist_Remove_Songs" xml:space="preserve">
    <value>Remove the selected song(s) from the playlist</value>
  </data>
  <data name="Playlist_Show_All_Songs" xml:space="preserve">
    <value>Shows all songs in the music catalog</value>
  </data>
  <data name="Playlist_Skip" xml:space="preserve">
    <value>Skips the current song</value>
  </data>
  <data name="QEdit_Align_Zero" xml:space="preserve">
    <value>Removes spaces at the beginning fo the Midi</value>
  </data>
  <data name="QEdit_GuitarMode" xml:space="preserve">
    <value>Sets the guitar switching of the Midi
Standard: Use the program changes in the Midi
Simple: No switching
Override By Track: The track name defines the guitar to use</value>
  </data>
  <data name="QEdit_Save_MB2_Config" xml:space="preserve">
    <value>Saves the current settings to a MidiBard2 config</value>
  </data>
  <data name="QEdit_To_MidiFile" xml:space="preserve">
    <value>Saves the song as a Midi file</value>
  </data>
  <data name="QEdit_To_Sequencer" xml:space="preserve">
    <value>Load the song into the sequencer for playing in game</value>
  </data>
  <data name="QEdit_To_Siren" xml:space="preserve">
    <value>Load the song into the preview</value>
  </data>
  <data name="Settings_AmpFront" xml:space="preserve">
    <value>Brings the amp in front after a new song was loaded from the playlist</value>
  </data>
  <data name="Settings_AutoAcceptInvite" xml:space="preserve">
    <value>Auto accept a party invite from a local bard</value>
  </data>
  <data name="Settings_Autoequip" xml:space="preserve">
    <value>Autoequip the bard(s) at song loading</value>
  </data>
  <data name="Settings_Autohost" xml:space="preserve">
    <value>Automatically sets the host bard via the in game group rooster</value>
  </data>
  <data name="Settings_Dalamud_KeyOut" xml:space="preserve">
    <value>Uses the Hypnotoad to play the notes and switches</value>
  </data>
  <data name="Settings_EnableSynthLimit" xml:space="preserve">
    <value>Enables / Disables the limitation to 16 voices in the song preview</value>
  </data>
  <data name="Settings_Force_Playback" xml:space="preserve">
    <value>Ignore verything and plays the song</value>
  </data>
  <data name="Settings_Hold_Notes" xml:space="preserve">
    <value>Plays the lenght of a note as it supposed to (an ancient function, leave it enabled)</value>
  </data>
  <data name="Settings_Ignore_GuitarSwitching" xml:space="preserve">
    <value>Ignores the guitar switches in songs</value>
  </data>
  <data name="Settings_Individual_Start" xml:space="preserve">
    <value>Start each performer by it's own metronome signal.
Only for up to 8 bards</value>
  </data>
  <data name="Settings_Keep_Tracks" xml:space="preserve">
    <value>Keep the performer settings</value>
  </data>
  <data name="Settings_Live_Play" xml:space="preserve">
    <value>Improves the live play (should be disabled when playing a midi).
Changing this will settings only take effect when a new song was loded</value>
  </data>
  <data name="Settings_Local_Orchestra" xml:space="preserve">
    <value>Enables the local orchestra</value>
  </data>
  <data name="Settings_MidiBard" xml:space="preserve">
    <value>Enables the MidiBard sync start.
Changing this will settings only take effect when a new song was loded</value>
  </data>
  <data name="Settings_Midi_Input" xml:space="preserve">
    <value>Select your MIDI input device (midi keyboard)</value>
  </data>
  <data name="Settings_Multibox" xml:space="preserve">
    <value>Allowes to start more than two game instances</value>
  </data>
  <data name="Settings_Note_Offset" xml:space="preserve">
    <value>Uses the delay compensation for each note individually.
Disables the live octave shifting.
Changing this will settings only take effect when a new song was loded</value>
  </data>
  <data name="Settings_Sync_Lyrics" xml:space="preserve">
    <value>Tries to sync the lyrics to the ensemble</value>
  </data>
  <data name="Settings_TriggerSource" xml:space="preserve">
    <value>Select the autostart trigger [Metronome is preferred]</value>
  </data>
  <data name="Settings_Use_Skin" xml:space="preserve">
    <value>Enables a Skinned Ui (needs a restart)</value>
  </data>
  <data name="Siren_Load" xml:space="preserve">
    <value>Loads a song in the song preview</value>
  </data>
  <data name="Siren_Lyrics" xml:space="preserve">
    <value>Saves the lyrics for the song into a lrc file</value>
  </data>
  <data name="Siren_Pause" xml:space="preserve">
    <value>Pause the loaded song</value>
  </data>
  <data name="Siren_Play" xml:space="preserve">
    <value>Plays the loaded song</value>
  </data>
  <data name="Siren_Record" xml:space="preserve">
    <value>Records the loaded song to wav file</value>
  </data>
  <data name="Siren_Stop" xml:space="preserve">
    <value>Stops and rewind the loaded song</value>
  </data>
  <data name="SongeBrowser_TargetDir" xml:space="preserve">
    <value>Sets the directory where your songs are located</value>
  </data>
  <data name="Statistics_Export_Song" xml:space="preserve">
    <value>Exports the currently loaded song as a Midi file</value>
  </data>
</root>