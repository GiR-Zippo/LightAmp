//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BardMusicPlayer.Ui.Locales {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Language {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Language() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BardMusicPlayer.Ui.Locales.Language", typeof(Language).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sets the client graphics to low specs ähnelt.
        /// </summary>
        public static string BardExtSettings_GFXLow {
            get {
                return ResourceManager.GetString("BardExtSettings_GFXLow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enables the lyrics parsing
        ///0 means stop lyrics parsing 
        ///1 the first lyrics track (lyric tracks are separate from the music tracks) ähnelt.
        /// </summary>
        public static string BardExtSettings_LyricsTrackNumber {
            get {
                return ResourceManager.GetString("BardExtSettings_LyricsTrackNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sends the song title in the chat ähnelt.
        /// </summary>
        public static string BardExtSettings_PostSongTitle {
            get {
                return ResourceManager.GetString("BardExtSettings_PostSongTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sends automatically at song load the title in the chat ähnelt.
        /// </summary>
        public static string BardExtSettings_PostSongTitle_Auto {
            get {
                return ResourceManager.GetString("BardExtSettings_PostSongTitle_Auto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Adds the song to the current playlist ähnelt.
        /// </summary>
        public static string Global_Load_Song_To_Playlist {
            get {
                return ResourceManager.GetString("Global_Load_Song_To_Playlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Load the song into the preview ähnelt.
        /// </summary>
        public static string Global_Load_Song_To_Preview {
            get {
                return ResourceManager.GetString("Global_Load_Song_To_Preview", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Merges all tracks in the song and plays them as one
        ///2 tracks are 1 track now ähnelt.
        /// </summary>
        public static string Main_All_Tracks {
            get {
                return ResourceManager.GetString("Main_All_Tracks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Plays the currently loaded song.
        ///Right click will equip the bards, do the ready check and starts to play ähnelt.
        /// </summary>
        public static string Main_Play {
            get {
                return ResourceManager.GetString("Main_Play", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sets the playback speed of the song ähnelt.
        /// </summary>
        public static string Main_Playback_Speed {
            get {
                return ResourceManager.GetString("Main_Playback_Speed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rewinds the song ähnelt.
        /// </summary>
        public static string Main_Rewind {
            get {
                return ResourceManager.GetString("Main_Rewind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Opens the script panel ähnelt.
        /// </summary>
        public static string Main_Script {
            get {
                return ResourceManager.GetString("Main_Script", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die More options ähnelt.
        /// </summary>
        public static string Misc_More_Options {
            get {
                return ResourceManager.GetString("Misc_More_Options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Opens the song analyzer and voice graph ähnelt.
        /// </summary>
        public static string Misc_OMNI {
            get {
                return ResourceManager.GetString("Misc_OMNI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Opens the quick song editor ähnelt.
        /// </summary>
        public static string Misc_QEdit {
            get {
                return ResourceManager.GetString("Misc_QEdit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add song(s) to the current playlist.
        ///Right click to add a folder ähnelt.
        /// </summary>
        public static string Playlist_Add {
            get {
                return ResourceManager.GetString("Playlist_Add", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enables / Disables the autoplay
        ///(only for solo play) ähnelt.
        /// </summary>
        public static string Playlist_Autoplay {
            get {
                return ResourceManager.GetString("Playlist_Autoplay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reorganise the music catalog to free up some space ähnelt.
        /// </summary>
        public static string Playlist_Catalog_Cleanup {
            get {
                return ResourceManager.GetString("Playlist_Catalog_Cleanup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Export the current music catalog ähnelt.
        /// </summary>
        public static string Playlist_Catalog_Export {
            get {
                return ResourceManager.GetString("Playlist_Catalog_Export", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Creates a new music catalog ähnelt.
        /// </summary>
        public static string Playlist_Catalog_New {
            get {
                return ResourceManager.GetString("Playlist_Catalog_New", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Opens a music catalog ähnelt.
        /// </summary>
        public static string Playlist_Catalog_Open {
            get {
                return ResourceManager.GetString("Playlist_Catalog_Open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Search for a song in the selected playlist ähnelt.
        /// </summary>
        public static string Playlist_Catalog_Search_Songs {
            get {
                return ResourceManager.GetString("Playlist_Catalog_Search_Songs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die delete the current playlist ähnelt.
        /// </summary>
        public static string Playlist_Delete {
            get {
                return ResourceManager.GetString("Playlist_Delete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Create a new playlist ähnelt.
        /// </summary>
        public static string Playlist_New {
            get {
                return ResourceManager.GetString("Playlist_New", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Opens the meta data editor ähnelt.
        /// </summary>
        public static string Playlist_Open_Metadata {
            get {
                return ResourceManager.GetString("Playlist_Open_Metadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove the selected song(s) from the playlist ähnelt.
        /// </summary>
        public static string Playlist_Remove_Songs {
            get {
                return ResourceManager.GetString("Playlist_Remove_Songs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Shows all songs in the music catalog ähnelt.
        /// </summary>
        public static string Playlist_Show_All_Songs {
            get {
                return ResourceManager.GetString("Playlist_Show_All_Songs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Skips the current song ähnelt.
        /// </summary>
        public static string Playlist_Skip {
            get {
                return ResourceManager.GetString("Playlist_Skip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Removes spaces at the beginning fo the Midi ähnelt.
        /// </summary>
        public static string QEdit_Align_Zero {
            get {
                return ResourceManager.GetString("QEdit_Align_Zero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sets the guitar switching of the Midi
        ///Standard: Use the program changes in the Midi
        ///Simple: No switching
        ///Override By Track: The track name defines the guitar to use ähnelt.
        /// </summary>
        public static string QEdit_GuitarMode {
            get {
                return ResourceManager.GetString("QEdit_GuitarMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Saves the current settings to a MidiBard2 config ähnelt.
        /// </summary>
        public static string QEdit_Save_MB2_Config {
            get {
                return ResourceManager.GetString("QEdit_Save_MB2_Config", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Saves the song as a Midi file ähnelt.
        /// </summary>
        public static string QEdit_To_MidiFile {
            get {
                return ResourceManager.GetString("QEdit_To_MidiFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Load the song into the sequencer for playing in game ähnelt.
        /// </summary>
        public static string QEdit_To_Sequencer {
            get {
                return ResourceManager.GetString("QEdit_To_Sequencer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Load the song into the preview ähnelt.
        /// </summary>
        public static string QEdit_To_Siren {
            get {
                return ResourceManager.GetString("QEdit_To_Siren", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Brings the amp in front after a new song was loaded from the playlist ähnelt.
        /// </summary>
        public static string Settings_AmpFront {
            get {
                return ResourceManager.GetString("Settings_AmpFront", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Auto accept a party invite from a local bard ähnelt.
        /// </summary>
        public static string Settings_AutoAcceptInvite {
            get {
                return ResourceManager.GetString("Settings_AutoAcceptInvite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Autoequip the bard(s) at song loading ähnelt.
        /// </summary>
        public static string Settings_Autoequip {
            get {
                return ResourceManager.GetString("Settings_Autoequip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Automatically sets the host bard via the in game group rooster ähnelt.
        /// </summary>
        public static string Settings_Autohost {
            get {
                return ResourceManager.GetString("Settings_Autohost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Uses the Hypnotoad to play the notes and switches ähnelt.
        /// </summary>
        public static string Settings_Dalamud_KeyOut {
            get {
                return ResourceManager.GetString("Settings_Dalamud_KeyOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enables / Disables the limitation to 16 voices in the song preview ähnelt.
        /// </summary>
        public static string Settings_EnableSynthLimit {
            get {
                return ResourceManager.GetString("Settings_EnableSynthLimit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ignore verything and plays the song ähnelt.
        /// </summary>
        public static string Settings_Force_Playback {
            get {
                return ResourceManager.GetString("Settings_Force_Playback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Plays the lenght of a note as it supposed to (an ancient function, leave it enabled) ähnelt.
        /// </summary>
        public static string Settings_Hold_Notes {
            get {
                return ResourceManager.GetString("Settings_Hold_Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ignores the guitar switches in songs ähnelt.
        /// </summary>
        public static string Settings_Ignore_GuitarSwitching {
            get {
                return ResourceManager.GetString("Settings_Ignore_GuitarSwitching", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Start each performer by it&apos;s own metronome signal.
        ///Only for up to 8 bards ähnelt.
        /// </summary>
        public static string Settings_Individual_Start {
            get {
                return ResourceManager.GetString("Settings_Individual_Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Keep the performer settings ähnelt.
        /// </summary>
        public static string Settings_Keep_Tracks {
            get {
                return ResourceManager.GetString("Settings_Keep_Tracks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Improves the live play (should be disabled when playing a midi).
        ///Changing this will settings only take effect when a new song was loded ähnelt.
        /// </summary>
        public static string Settings_Live_Play {
            get {
                return ResourceManager.GetString("Settings_Live_Play", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enables the local orchestra ähnelt.
        /// </summary>
        public static string Settings_Local_Orchestra {
            get {
                return ResourceManager.GetString("Settings_Local_Orchestra", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select your MIDI input device (midi keyboard) ähnelt.
        /// </summary>
        public static string Settings_Midi_Input {
            get {
                return ResourceManager.GetString("Settings_Midi_Input", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enables the MidiBard sync start.
        ///Changing this will settings only take effect when a new song was loded ähnelt.
        /// </summary>
        public static string Settings_MidiBard {
            get {
                return ResourceManager.GetString("Settings_MidiBard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Allowes to start more than two game instances ähnelt.
        /// </summary>
        public static string Settings_Multibox {
            get {
                return ResourceManager.GetString("Settings_Multibox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Uses the delay compensation for each note individually.
        ///Disables the live octave shifting.
        ///Changing this will settings only take effect when a new song was loded ähnelt.
        /// </summary>
        public static string Settings_Note_Offset {
            get {
                return ResourceManager.GetString("Settings_Note_Offset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tries to sync the lyrics to the ensemble ähnelt.
        /// </summary>
        public static string Settings_Sync_Lyrics {
            get {
                return ResourceManager.GetString("Settings_Sync_Lyrics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the autostart trigger [Metronome is preferred] ähnelt.
        /// </summary>
        public static string Settings_TriggerSource {
            get {
                return ResourceManager.GetString("Settings_TriggerSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enables a Skinned Ui (needs a restart) ähnelt.
        /// </summary>
        public static string Settings_Use_Skin {
            get {
                return ResourceManager.GetString("Settings_Use_Skin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Loads a song in the song preview ähnelt.
        /// </summary>
        public static string Siren_Load {
            get {
                return ResourceManager.GetString("Siren_Load", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Saves the lyrics for the song into a lrc file ähnelt.
        /// </summary>
        public static string Siren_Lyrics {
            get {
                return ResourceManager.GetString("Siren_Lyrics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Pause the loaded song ähnelt.
        /// </summary>
        public static string Siren_Pause {
            get {
                return ResourceManager.GetString("Siren_Pause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Plays the loaded song ähnelt.
        /// </summary>
        public static string Siren_Play {
            get {
                return ResourceManager.GetString("Siren_Play", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Records the loaded song to wav file ähnelt.
        /// </summary>
        public static string Siren_Record {
            get {
                return ResourceManager.GetString("Siren_Record", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Stops and rewind the loaded song ähnelt.
        /// </summary>
        public static string Siren_Stop {
            get {
                return ResourceManager.GetString("Siren_Stop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sets the directory where your songs are located ähnelt.
        /// </summary>
        public static string SongeBrowser_TargetDir {
            get {
                return ResourceManager.GetString("SongeBrowser_TargetDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Exports the currently loaded song as a Midi file ähnelt.
        /// </summary>
        public static string Statistics_Export_Song {
            get {
                return ResourceManager.GetString("Statistics_Export_Song", resourceCulture);
            }
        }
    }
}
